apply plugin: "jacoco"
apply { from("filter.gradle") }

jacoco {
    toolVersion = "0.8.7"
}

android {
    buildTypes {
        debug {
            testCoverageEnabled false
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }

        sourceSets {
            main.java.srcDirs += 'src/main/java'
            test.java.srcDirs += 'src/test/java'
            androidTest.java.srcDirs += 'src/androidTest/java'
        }
    }

    def fileFilter = getMyFilter()

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinSrc = "${project.projectDir}/src/main/kotlin"

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest'], group: 'jacocoReport') {
        reports {
            xml.required = true
            html.required = true
        }
        sourceDirectories.from = files([mainSrc, kotlinSrc])
        classDirectories.from = files([debugTree, kotlinTree])
        executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")
    }

    task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport', group: 'jacocoReport') {
        sourceDirectories.from = files([mainSrc, kotlinSrc])
        classDirectories.from = files([debugTree, kotlinTree])
        executionData.from = files("${buildDir}/jacoco/testDebugUnitTest.exec")

        violationRules {
            setFailOnViolation(true)

            rule {
                limit {
                    minimum = 0.0
                }
            }
        }
    }

    task jacocoTestCoverageViewResult(type: Exec, dependsOn: 'jacocoTestReport', group: 'jacocoReport') {
        executable "sh"
        args "-c", "open '${buildDir}/reports/jacoco/jacocoTestReport/html/index.html'"
    }
}