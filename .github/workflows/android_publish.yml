name: Android Publish

on:
  push:
    branches:
      - 'master'

env:
  REPO_USERID: ${{ secrets.REPO_USERID }}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}

jobs:
  build:
    name: Setup Environment and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure Step
        uses: ./.github/workflows/actions/configure

      - name: Run AssembleRelease
        run: ./gradlew module:assembleRelease

      - name: Cache local
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  code-analysis:
    name: Code Analysis
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Run Lint
        uses: ./.github/workflows/actions/lint

      - name: Upload Lint Test Report
        uses: actions/upload-artifact@v3
        with:
          name: lint_report
          path: module/build/reports/lint-results-debug.html

      - name: Run Tests
        run: ./gradlew module:testDebugUnitTest

      - name: Upload Test Report
        uses: actions/upload-artifact@v3
        with:
          name: unit_test_report
          path: module/build/reports/tests/testDebugUnitTest/

      - name: Run Jacoco Test Report
        run: ./gradlew module:jacocoTestReport

      - name: Upload coverage test report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco_test_report
          path: module/build/reports/jacoco/jacocoTestReport/

      - name: Run Jacoco Test Coverage Verification
        run: ./gradlew module:jacocoTestCoverageVerification

      - name: Run SonarQube Scan
        run: ./gradlew module:sonarqube -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.login=${{ secrets.SONARCLOUDTOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tag:
    name: Tag
    needs: [ code-analysis ]
    runs-on: ubuntu-latest
    steps:
      - name: Create Tag Release
        run: |
          currentVersion=`grep version ./buildSrc/src/main/kotlin/ConfigureApp.kt | awk -F" " '{ print $5 }' `
          versionFormatted=`echo $currentVersion | sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/'`
          echo "Version: $versionFormatted"
          git tag $versionFormatted
          git push origin --tags